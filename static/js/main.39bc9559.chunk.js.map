{"version":3,"sources":["validation.js","components/registration-form.jsx","components/modal.jsx","App.js","serviceWorker.js","index.js"],"names":["getTouchedValidInput","value","touched","Rules","style","listStyle","padding","Example","props","setSubmitting","setModal","useState","email","name","password","checkPassword","form","setForm","conditions","setConditions","setTouched","allFieldsFulled","Object","values","every","Boolean","isValidEmail","match","isValidName","isValidPassword","isValidCheckPass","isValidForm","changeHandler","e","target","blurHandler","Form","onSubmit","preventDefault","console","log","JSON","stringify","FormGroup","Label","fontWeight","for","Input","borderColor","onBlur","onChange","type","id","placeholder","color","fontSize","pass","check","href","textAlign","Button","disabled","backgroundColor","ModalExample","isSubmitting","styledButton","buttonLabel","className","modal","toggle","onClick","Modal","isOpen","ModalHeader","border","ModalBody","App","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.39bc9559.chunk.js","sourcesContent":["export const getTouchedValidInput = (value, touched) => {  \n  switch(true) {\n    case value && touched:\n      return `green`;\n    case !value && touched:\n      return `red`;\n    default:\n      return ``;\n  }          \n};\n\nexport const getValidPassword = (value) => {\n  if(value){\n        \n    const str = value[0].match(/[a-zA-Z]/) || [];\n    const hasFirstLetter = Boolean(str[0]);\n    const hasNumber = Boolean(value.match(/[0-9]/));\n    const hasKirilic = Boolean(value.match(/[А-Яа-я]/));\n\n    const isValidName = (hasNumber) && (hasFirstLetter) && (!hasKirilic);\n\n return {hasFirstLetter, hasKirilic, hasNumber}\n    // console.log(isValidName);\n  }\n\n  return {};\n};\n\n","import React, {useState} from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport {getTouchedValidInput, getValidPassword} from '../validation';\n\nconst Rules = () => {\n  return (\n    <>\n      <p>Пароль должен содержать</p>\n      <ul style={{listStyle: `none` , padding: 0}}>\n        <li>От 6 до 32 символов</li>\n        <li>Цифру</li>\n        <li>Заглавную и строчную букву</li>\n      </ul>\n    </>\n  );\n};\n\nconst Example = (props) => {\n  const {setSubmitting, setModal} = props;\n  \n  const [form, setForm] = useState({\n    email: ``,\n    name: ``,\n    password: ``,\n    checkPassword: ``,    \n  });\n  const [conditions, setConditions] = useState(false);\n  const [touched, setTouched] = useState({\n    email: false,\n    name: false,\n  });\n\n  const allFieldsFulled = Object.values(form).every((value)=>Boolean(value));\n  const isValidEmail = !!form.email.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\n  const isValidName = !!form.name.match(/^[a-zA-Z][a-zA-Z0-9-_\\.]{3,40}$/);\n  const isValidPassword = !!form.password.match(/(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{6,32}$/);\n  const isValidCheckPass = (\n    form.checkPassword && \n    form.password === form.checkPassword && \n    form.checkPassword !== form.email &&\n    form.checkPassword !== form.name);\n\n  const isValidForm = allFieldsFulled && isValidEmail && isValidName && isValidPassword && isValidCheckPass && conditions;\n\n  const changeHandler = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;    \n    setForm({\n      ...form, [name]:value\n    });    \n  };\n\n  const blurHandler = (e) => {    \n    const name = e.target.name;    \n    setTouched({\n      ...touched, [name]:true\n    });   \n  };\n\n  const changeHandlerConditions = () => {     \n    setConditions(!conditions);    \n  };\n\n  return (\n    <Form onSubmit={(e)=>{\n      e.preventDefault();\n      setSubmitting(true);\n      setModal(false);\n      console.log(JSON.stringify(form));\n    }}>\n      \n      <FormGroup>\n        <Label style={{fontWeight: `bold`}} for=\"email\">Email</Label>\n        <Input \n          style={{borderColor: getTouchedValidInput(isValidEmail, touched.email)}} \n          value={form.email}        \n          onBlur={blurHandler} \n          onChange={changeHandler}        \n          type=\"email\" \n          name=\"email\" \n          id=\"email\" \n          placeholder=\"Введите e-mail\" />\n        {touched.email && !isValidEmail && <p style={{color:`red`}}>Не забудьте ввести действительный email</p>}\n      </FormGroup>\n      <FormGroup>\n        <Label style={{fontWeight: `bold`}} for=\"name\">Никнейм</Label>\n        <Input \n          style={{borderColor: getTouchedValidInput(isValidName, touched.name)}}\n          value={form.name} \n          onBlur={blurHandler} \n          onChange={changeHandler} \n          type=\"text\" \n          name=\"name\" \n          id=\"name\" />\n        {touched.name && !isValidName && <div style={{fontSize: `12px`}}> \n        Не забудьте ввести корректный никнейм. Никнейм:\n\n        <ul>\n          <li style={{color: `red`}}>должен начинаться с буквы</li>\n          <li style={{color: `red`}}>должен состоять из латинских символов</li>\n          <li style={{color: `grey`}}>может содержать цифры и нижнее подчеркивание</li>\n          \n\n        </ul>\n         </div>}\n        \n      </FormGroup>\n      <FormGroup>\n        <Label style={{fontWeight: `bold`}} for=\"password\">Пароль</Label>\n        <Input \n         style={{borderColor: getTouchedValidInput(isValidPassword, touched.password)}}\n        value={form.pass} \n        onBlur={blurHandler}\n        onChange={changeHandler} type=\"password\" name=\"password\" id=\"password\" placeholder=\"Введите пароль\" />\n         \n        {touched.password && !isValidPassword && <p style={{color:`red`}}> Слишком простой пароль</p>}       \n      </FormGroup>\n      <Rules />\n      <FormGroup>\n        <Label style={{fontWeight: `bold`}} for=\"checkPassword\">Пароль еще раз</Label>\n        <Input\n        style={{borderColor: getTouchedValidInput(isValidCheckPass, touched.checkPassword)}}\n        value={form.checkPassword} \n        onBlur={blurHandler}\n        onChange={changeHandler} type=\"password\" name=\"checkPassword\" id=\"checkPassword\" placeholder=\"Введите еще раз пароль\" />\n        {form.email && form.checkPassword === form.email && <p style={{color:`red`}}>Пароль не должен совпадать с почтой</p>}\n        {form.name && form.checkPassword === form.name && <p style={{color:`red`}}>Пароль не должен совпадать с никнеймом</p>}\n        {touched.checkPassword && form.checkPassword !==form.password ? <p style={{color:`red`}}> Пароли не совпадают</p> :\n        form.checkPassword && isValidCheckPass && <span style={{fontSize:`12px`}}> Пароли совпадают</span>\n        }\n      </FormGroup>\n      <FormGroup check>\n        <Label check>\n          <Input value={conditions} onChange={changeHandlerConditions} type=\"checkbox\" name=\"conditions\"/>{' '}\n          Я принимаю условия <a href=\"#\">пользовательского соглашения</a>\n        </Label>\n      </FormGroup>\n      <div style={{textAlign: `center`, }}><Button disabled={!isValidForm} style={{backgroundColor: `#558CB7`}}>Зарегистрироваться</Button></div>\n    </Form>\n  );\n}\n\nexport default Example;\n","import React, { useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport RegistrationForm from './registration-form';\n\nconst ModalExample = (props) => {\n  const [isSubmitting, setSubmitting] = useState(false); \n  \n  const styledButton = isSubmitting ? `green` :  `#558CB7`;\n\n  const {\n    buttonLabel,\n    className\n  } = props;\n\n  const [modal, setModal] = useState(true);\n\n  const toggle = () => setModal(!modal);\n\n  return (\n    \n    <div>\n      <Button \n        style={{backgroundColor: styledButton, borderColor: `#558CB7`}} \n        color=\"danger\" \n        onClick={toggle} \n        disabled={isSubmitting}\n        >{buttonLabel}\n      </Button>\n      <Modal isOpen={modal} toggle={toggle} className={className}>\n        <ModalHeader style={{border: `none`}} toggle={toggle}>Регистарция</ModalHeader>\n        <ModalBody>\n          <RegistrationForm setSubmitting={setSubmitting} setModal={setModal}/>\n        </ModalBody>       \n      </Modal>\n    </div>\n  );\n}\n\nexport default ModalExample;\n\n","import React from 'react';\nimport Modal from './components/modal';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Modal \n      buttonLabel={`Регистрация`}\n      className={`registration`}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}