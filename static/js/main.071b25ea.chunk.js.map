{"version":3,"sources":["components/registration-form.jsx","components/registration.jsx","App.js","serviceWorker.js","index.js"],"names":["Rules","style","listStyle","padding","Example","props","useState","email","setMail","name","setName","pass","setPass","checkPass","setCheckPass","conditions","setConditions","a","length","Form","onSubmit","e","preventDefault","console","log","FormGroup","Label","fontWeight","for","Input","borderColor","value","onChange","target","type","id","placeholder","check","href","textAlign","Button","backgroundColor","ModalExample","buttonLabel","className","modal","setModal","toggle","color","onClick","Modal","isOpen","ModalHeader","border","ModalBody","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.071b25ea.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\r\n\r\nconst Rules = () => {\r\n  return (\r\n    <>\r\n      <p>Пароль должен содержать</p>\r\n      <ul style={{listStyle: `none` , padding: 0}}>\r\n        <li>От 6 до 32 символов</li>\r\n        <li>Цифру</li>\r\n        <li>Заглавную и строчную букву</li>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Example = (props) => {\r\n  \r\n  const [email, setMail] = useState(``);\r\n  const [name, setName] = useState(``);\r\n  const [pass, setPass] = useState(``);\r\n  const [checkPass, setCheckPass] = useState(``);\r\n  const [conditions, setConditions] = useState(false);\r\n\r\n  const a = email.length > 6 ? `green` : `red`; \r\n\r\n  const changeHandlerName = (e) => {\r\n    const value = e.target.value;      \r\n    setName(value);\r\n  };\r\n\r\n  const changeHandlerEmail = (e) => {\r\n    const value = e.target.value;    \r\n    setMail(value);\r\n  }\r\n\r\n  const changeHandlerPass = (e) => {\r\n    const value = e.target.value;    \r\n    setPass(value);\r\n  }\r\n\r\n  const changeHandlerCheckPass = (e) => {\r\n    const value = e.target.value;    \r\n    setCheckPass(value);\r\n  }\r\n\r\n  const changeHandlerConditions = () => {     \r\n    setConditions(!conditions);    \r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={(e)=>{\r\n      e.preventDefault();\r\n      console.log({name, email,pass, checkPass, conditions});\r\n    }}>\r\n      \r\n      <FormGroup>\r\n        <Label style={{fontWeight: `bold`}} for=\"email\">Email</Label>\r\n        <Input style={{borderColor: a}} value={email} onChange={changeHandlerEmail} type=\"email\" name=\"email\" id=\"email\" placeholder=\"Введите e-mail\" />\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label style={{fontWeight: `bold`}} for=\"nikname\">Никнейм</Label>\r\n        <Input value={name} onChange={changeHandlerName} type=\"text\" name=\"nikname\" id=\"nikname\" />        \r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label style={{fontWeight: `bold`}} for=\"password\">Пароль</Label>\r\n        <Input value={pass} onChange={changeHandlerPass} type=\"password\" name=\"password\" id=\"password\" placeholder=\"Введите пароль\" />\r\n      </FormGroup>\r\n      <Rules />\r\n      <FormGroup>\r\n        <Label style={{fontWeight: `bold`}} for=\"checkPassword\">Пароль еще раз</Label>\r\n        <Input value={checkPass} onChange={changeHandlerCheckPass} type=\"checkPassword\" name=\"checkPassword\" id=\"checkPassword\" placeholder=\"Введите еще раз пароль\" />\r\n      </FormGroup>\r\n      <FormGroup check>\r\n        <Label check>\r\n          <Input value={conditions} onChange={changeHandlerConditions} type=\"checkbox\" />{' '}\r\n          Я принимаю условия <a href=\"#\">пользовательского соглашения</a>\r\n        </Label>\r\n      </FormGroup>\r\n      <div style={{textAlign: `center`, }}><Button style={{backgroundColor: `#558CB7`}}>Зарегистрироваться</Button></div>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default Example;\r\n","import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport RegistrationForm from './registration-form';\r\n\r\nconst ModalExample = (props) => {\r\n  const {\r\n    buttonLabel,\r\n    className\r\n  } = props;\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  return (\r\n    \r\n    <div>\r\n      <Button style={{backgroundColor: `#558CB7`, borderColor: `#558CB7`}} color=\"danger\" onClick={toggle}>{buttonLabel}</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader style={{border: `none`}} toggle={toggle}>Регистарция</ModalHeader>\r\n        <ModalBody>\r\n          <RegistrationForm />\r\n        </ModalBody>\r\n        {/* <ModalFooter>\r\n          <Button color=\"primary\" onClick={toggle}>Do Something</Button>{' '}\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter> */}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ModalExample;\r\n","import React from 'react';\r\nimport Registration from './components/registration';\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Registration \r\n      buttonLabel={`Регистрация`}\r\n      className={`registration`}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}