{"version":3,"sources":["components/error-name.jsx","components/rules.jsx","components/error-check-pass.jsx","components/registration-form.jsx","validation.js","components/modal.jsx","App.js","serviceWorker.js","index.js"],"names":["props","style","fontSize","className","listStyle","padding","form","touched","email","checkPassword","name","password","setSubmitting","setModal","useState","setForm","conditions","setConditions","setTouched","allFieldsFulled","Object","values","every","value","Boolean","isValidEmail","match","isValidName","isValidPassword","isValidCheckPass","validationSchema","isValidForm","changeHandler","e","target","blurHandler","Form","onSubmit","preventDefault","console","log","JSON","stringify","FormGroup","Label","for","Input","valid","invalid","onBlur","onChange","type","id","placeholder","color","pass","check","href","Button","disabled","backgroundColor","ModalExample","isSubmitting","styledButton","buttonLabel","modal","toggle","borderColor","onClick","Modal","isOpen","ModalHeader","border","ModalBody","App","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.93cc0ee6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <div style={{fontSize: `12px`}}> \r\n      <p>Не забудьте ввести корректный никнейм. Никнейм:</p>\r\n        <ul>\r\n          <li className=\"error\">должен начинаться с буквы</li>\r\n          <li className=\"error\">должен состоять из латинских символов без пробелов и спецсимволов</li>\r\n          <li >может содержать цифры и нижнее подчеркивание</li>\r\n        </ul>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <>\r\n      <p>Пароль должен содержать</p>\r\n      <ul style={{listStyle: `none` , padding: 0}}>\r\n        <li>От 6 до 32 символов</li>\r\n        <li>Цифру</li>\r\n        <li>Заглавную и строчную букву</li>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport default ({form, touched}) => {\r\n  switch(true){\r\n    case form.email && form.checkPassword === form.email:\r\n      return (\r\n        <span className=\"checkPass error\">Пароль не должен совпадать с почтой</span>\r\n      );\r\n    case form.name && form.checkPassword === form.name:\r\n      return (\r\n        <span className=\"checkPass error\">Пароль не должен совпадать с никнеймом</span>\r\n      );\r\n    case touched.checkPassword && form.checkPassword !==form.password:\r\n      return (\r\n        <span className=\"checkPass error\"> Пароли не совпадают</span>\r\n      );    \r\n    default:\r\n      return ``\r\n  }\r\n};\r\n","import React, {useState} from 'react';\r\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\r\nimport {validationSchema, getValidPassword} from '../validation';\r\nimport ErrorName from './error-name';\r\nimport Rules from './rules';\r\nimport ErrorCheckPass from './error-check-pass';\r\n\r\nexport default (props) => {\r\n  const {setSubmitting, setModal} = props;\r\n  \r\n  const [form, setForm] = useState({\r\n    email: ``,\r\n    name: ``,\r\n    password: ``,\r\n    checkPassword: ``,    \r\n  });\r\n\r\n  const [conditions, setConditions] = useState(false);\r\n\r\n  const [touched, setTouched] = useState({\r\n    email: false,\r\n    name: false,\r\n    password: false,\r\n    checkPassword: false,\r\n  });\r\n\r\n  const {allFieldsFulled,isValidEmail, isValidName,isValidPassword,isValidCheckPass} = validationSchema(form);\r\n  const isValidForm = allFieldsFulled && isValidEmail && isValidName && isValidPassword && isValidCheckPass && conditions;\r\n\r\n  const changeHandler = (e) => {\r\n    const name = e.target.name;\r\n    const value = e.target.value;    \r\n    setForm({\r\n      ...form, [name]:value\r\n    });    \r\n  };\r\n\r\n  const blurHandler = (e) => {    \r\n    const name = e.target.name;    \r\n    setTouched({\r\n      ...touched, [name]:true\r\n    });   \r\n  };\r\n\r\n  const changeHandlerConditions = () => {     \r\n    setConditions(!conditions);    \r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={(e)=>{\r\n      e.preventDefault();\r\n      setSubmitting(true);\r\n      setModal(false);\r\n      console.log(JSON.stringify(form));\r\n    }}>\r\n      \r\n      <FormGroup>\r\n        <Label className=\"label\" for=\"email\">Email</Label>\r\n        <Input           \r\n          valid = {isValidEmail&&touched.email} invalid = {!isValidEmail&&touched.email} \r\n          value={form.email} onBlur={blurHandler} onChange={changeHandler}        \r\n          type=\"email\" name=\"email\" id=\"email\" placeholder=\"Введите e-mail\" />\r\n        {touched.email && !isValidEmail && <p style={{color:`red`}}>Не забудьте ввести действительный email</p>}\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label className=\"label\" for=\"name\">Никнейм</Label>\r\n        <Input \r\n          valid = {isValidName&&touched.name} invalid = {!isValidName&&touched.name} \r\n          value={form.name} onBlur={blurHandler} onChange={changeHandler} \r\n          type=\"text\" name=\"name\" id=\"name\" />\r\n\r\n        {!isValidName&&touched.name && <ErrorName />} \r\n\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label className=\"label\" for=\"password\">Пароль</Label>\r\n        <Input \r\n        valid = {isValidPassword&&touched.password} invalid = {!isValidPassword&&touched.password} \r\n        value={form.pass} onBlur={blurHandler} onChange={changeHandler} \r\n        type=\"password\" name=\"password\" id=\"password\" placeholder=\"Введите пароль\" />\r\n        {touched.password && !isValidPassword && <p style={{color:`red`}}> Слишком простой пароль</p>}       \r\n      </FormGroup>\r\n      <Rules />\r\n      <FormGroup>\r\n        <Label className=\"label\" for=\"checkPassword\">Пароль еще раз</Label>\r\n        <Input\r\n        valid = {isValidCheckPass&&touched.checkPassword} \r\n        invalid = {!isValidCheckPass&&touched.checkPassword} \r\n        value={form.checkPassword} onBlur={blurHandler}\r\n        onChange={changeHandler} type=\"password\" name=\"checkPassword\" id=\"checkPassword\" placeholder=\"Введите еще раз пароль\" />\r\n        \r\n        {form.checkPassword && isValidCheckPass ?\r\n          <span className=\"checkPass checkPassOk\"> Пароли совпадают</span> :\r\n          <ErrorCheckPass form={form} touched={touched}/>}\r\n        \r\n      </FormGroup>\r\n      <FormGroup check>\r\n        <Label check>\r\n          <Input value={conditions} onChange={changeHandlerConditions} type=\"checkbox\" name=\"conditions\"/>{' '}\r\n          Я принимаю условия <a href=\"#\">пользовательского соглашения</a>\r\n        </Label>\r\n      </FormGroup>\r\n      <div className=\"center\">\r\n        <Button disabled={!isValidForm} style={{backgroundColor: `#558CB7`}}>Зарегистрироваться</Button>\r\n      </div>\r\n    </Form>\r\n  );\r\n}\r\n","\r\nexport const getValidPassword = (value) => {\r\n  if(value){\r\n        \r\n    const str = value[0].match(/[a-zA-Z]/) || [];\r\n    const hasFirstLetter = Boolean(str[0]);\r\n    const hasNumber = Boolean(value.match(/[0-9]/));\r\n    const hasKirilic = Boolean(value.match(/[А-Яа-я]/));\r\n\r\n    const isValidName = (hasNumber) && (hasFirstLetter) && (!hasKirilic);\r\n\r\n return {hasFirstLetter, hasKirilic, hasNumber}\r\n    // console.log(isValidName);\r\n  }\r\n\r\n  return {};\r\n};\r\n\r\nexport const validationSchema = (form) => {\r\n  return {\r\n    allFieldsFulled: Object.values(form).every((value)=>Boolean(value)),\r\n    isValidEmail: !!form.email.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i),\r\n    isValidName: !!form.name.match(/^[a-zA-Z][a-zA-Z0-9-_\\.]{3,40}$/),\r\n    isValidPassword: !!form.password.match(/(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{6,32}$/),\r\n    isValidCheckPass: Boolean(form.checkPassword && form.password === form.checkPassword && \r\n      form.checkPassword !== form.email && form.checkPassword !== form.name),        \r\n  }\r\n};\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap';\r\nimport RegistrationForm from './registration-form';\r\n\r\nconst ModalExample = (props) => {\r\n  const [isSubmitting, setSubmitting] = useState(false); \r\n  \r\n  const styledButton = isSubmitting ? `green` :  `#558CB7`;\r\n\r\n  const {\r\n    buttonLabel,\r\n    className\r\n  } = props;\r\n\r\n  const [modal, setModal] = useState(true);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  return (\r\n    \r\n    <div>\r\n      <Button \r\n        style={{backgroundColor: styledButton, borderColor: `#558CB7`}} \r\n        color=\"danger\" \r\n        onClick={toggle} \r\n        disabled={isSubmitting}\r\n        >{buttonLabel}\r\n      </Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader style={{border: `none`}} toggle={toggle}>Регистарция</ModalHeader>\r\n        <ModalBody>\r\n          <RegistrationForm setSubmitting={setSubmitting} setModal={setModal}/>\r\n        </ModalBody>       \r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ModalExample;\r\n\r\n","import React from 'react';\r\nimport Modal from './components/modal';\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Modal \r\n      buttonLabel={`Регистрация`}\r\n      className={`registration`}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}