{"version":3,"sources":["components/error-name.jsx","components/rules.jsx","components/error-check-pass.jsx","components/registration-form.jsx","validation.js","components/modal.jsx","App.js","serviceWorker.js","index.js"],"names":["props","style","fontSize","className","password","passwordSize","touched","match","hasDifLetters","hasNumber","getMessage","text","inCase","form","email","checkPassword","name","setSubmitting","setModal","useState","setForm","conditions","setConditions","setTouched","allFieldsFulled","Object","values","every","value","Boolean","isValidEmail","isValidName","isValidPassword","isValidCheckPass","validationSchema","isValidForm","changeHandler","e","target","blurHandler","Form","onSubmit","preventDefault","console","log","JSON","stringify","FormGroup","Label","for","Input","valid","invalid","onBlur","onChange","type","id","placeholder","pass","check","href","Button","disabled","backgroundColor","ModalExample","isSubmitting","styledButton","buttonLabel","modal","toggle","borderColor","color","onClick","Modal","isOpen","ModalHeader","border","ModalBody","App","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dab2e46e.chunk.js","sourcesContent":["import React from 'react';\n\nexport default (props) => {\n  return (\n    <div style={{fontSize: `12px`}}> \n      <p>Не забудьте ввести корректный никнейм. Никнейм:</p>\n      <ul>\n        <li className=\"error\">должен начинаться с буквы</li>\n        <li className=\"error\">должен состоять из латинских символов без пробелов и спецсимволов</li>\n        <li >может содержать цифры и нижнее подчеркивание</li>\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\n\n\n\nexport default ({password, touched}) => {\n  const isValidPassword = !!password.match(/(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{6,32}$/);\n  const passwordSize = !!password.match(/[0-9a-zA-Z]{6,32}$/);\n  const hasDifLetters = !!password.match(/(?=.*[a-z])(?=.*[A-Z])/);\n  const hasNumber = !!password.match(/(?=.*[0-9])/);\n\n  const getMessage = (password, text, inCase) => {\n    switch(true) {\n      case inCase:\n    return <li className=\"success\">{text}</li>\n      case password && !inCase:\n    return <li className=\"error\">{text}</li>\n      default:\n    return <li className=\"default\">{text}</li>      \n    }\n  };\n\n  return (\n    <div className=\"rules\">\n      <span>Пароль должен содержать</span>\n      <ul >\n       {getMessage(password, `От 6 до 32 символов`, passwordSize)}\n       {getMessage(password, `Цифру`, hasNumber)}\n       {getMessage(password, `Заглавную и строчную букву`, hasDifLetters)}       \n        {/* <li>{password}</li>\n        <li>{JSON.stringify(hasDifLetters)}</li> */}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport default ({form, touched}) => {\n  switch(true){\n    case form.email && form.checkPassword === form.email:\n      return (\n        <span className=\"checkPass error\">Пароль не должен совпадать с почтой</span>\n      );\n    case form.name && form.checkPassword === form.name:\n      return (\n        <span className=\"checkPass error\">Пароль не должен совпадать с никнеймом</span>\n      );\n    case touched.checkPassword && form.checkPassword !==form.password:\n      return (\n        <span className=\"checkPass error\"> Пароли не совпадают</span>\n      );    \n    default:\n      return ``\n  }\n};\n","import React, {useState} from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport {validationSchema, getValidPassword} from '../validation';\nimport ErrorName from './error-name';\nimport Rules from './rules';\nimport ErrorCheckPass from './error-check-pass';\n\nexport default (props) => {\n  const {setSubmitting, setModal} = props;\n  \n  const [form, setForm] = useState({email: ``, name: ``, password: ``, checkPassword: ``});\n  const [conditions, setConditions] = useState(false);\n  const [touched, setTouched] = useState({email: false, name: false, password: false, checkPassword: false});\n\n  const {allFieldsFulled, isValidEmail, isValidName, isValidPassword, isValidCheckPass} = validationSchema(form);\n  const isValidForm = allFieldsFulled && isValidEmail && isValidName && isValidPassword && isValidCheckPass && conditions;\n\n  const changeHandler = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;    \n    setForm({\n      ...form, [name]:value\n    });    \n  };\n\n  const blurHandler = (e) => {    \n    const name = e.target.name;    \n    setTouched({\n      ...touched, [name]:true\n    });   \n  };\n\n  return (\n    <Form onSubmit={(e)=>{\n      e.preventDefault();\n      setSubmitting(true);\n      setModal(false);\n      console.log(JSON.stringify(form));\n    }}>      \n      <FormGroup>\n        <Label className=\"label\" for=\"email\">Email</Label>\n        <Input           \n          valid = {isValidEmail&&touched.email} invalid = {!isValidEmail&&touched.email} \n          value={form.email} onBlur={blurHandler} onChange={changeHandler}        \n          type=\"email\" name=\"email\" id=\"email\" placeholder=\"Введите e-mail\" />\n        {touched.email && !isValidEmail && <p className=\"error\">Не забудьте ввести действительный email</p>}\n      </FormGroup>\n      <FormGroup>\n        <Label className=\"label\" for=\"name\">Никнейм</Label>\n        <Input \n          valid = {isValidName&&touched.name} invalid = {!isValidName&&touched.name} \n          value={form.name} onBlur={blurHandler} onChange={changeHandler} \n          type=\"text\" name=\"name\" id=\"name\" />\n\n        {!isValidName&&touched.name && <ErrorName />} \n\n      </FormGroup>\n      <FormGroup>\n        <Label className=\"label\" for=\"password\">Пароль</Label>\n        <Input \n        valid = {isValidPassword&&touched.password} invalid = {!isValidPassword&&touched.password} \n        value={form.pass} onBlur={blurHandler} onChange={changeHandler} \n        type=\"password\" name=\"password\" id=\"password\" placeholder=\"Введите пароль\" />\n        {touched.password && !isValidPassword && <p className=\"error\"> Слишком простой пароль</p>}       \n      </FormGroup>\n      <Rules password={form.password} touched={touched.password}/>\n      <FormGroup>\n        <Label className=\"label\" for=\"checkPassword\">Пароль еще раз</Label>\n        <Input\n        valid = {isValidCheckPass&&touched.checkPassword} \n        invalid = {!isValidCheckPass&&touched.checkPassword} \n        value={form.checkPassword} onBlur={blurHandler}\n        onChange={changeHandler} type=\"password\" name=\"checkPassword\" id=\"checkPassword\" placeholder=\"Введите еще раз пароль\" />\n        \n        {form.checkPassword && isValidCheckPass ?\n          <span className=\"checkPass checkPassOk\"> Пароли совпадают</span> :\n          <ErrorCheckPass form={form} touched={touched}/>}\n        \n      </FormGroup>\n      <FormGroup check>\n        <Label check>\n          <Input value={conditions} onChange={()=>setConditions(!conditions)} type=\"checkbox\" name=\"conditions\"/>{' '}\n          Я принимаю условия <a href=\"#\">пользовательского соглашения</a>\n        </Label>\n      </FormGroup>\n      <div className=\"center\">\n        <Button disabled={!isValidForm} style={{backgroundColor: `#558CB7`}}>Зарегистрироваться</Button>\n      </div>\n    </Form>\n  );\n}\n","\nexport const getValidPassword = (value) => {\n  if(value){\n        \n    const str = value[0].match(/[a-zA-Z]/) || [];\n    const hasFirstLetter = Boolean(str[0]);\n    const hasNumber = Boolean(value.match(/[0-9]/));\n    const hasKirilic = Boolean(value.match(/[А-Яа-я]/));\n\n    const isValidName = (hasNumber) && (hasFirstLetter) && (!hasKirilic);\n\n return {hasFirstLetter, hasKirilic, hasNumber}\n    // console.log(isValidName);\n  }\n\n  return {};\n};\n\nexport const validationSchema = (form) => {\n  return {\n    allFieldsFulled: Object.values(form).every((value)=>Boolean(value)),\n    isValidEmail: !!form.email.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i),\n    isValidName: !!form.name.match(/^[a-zA-Z][a-zA-Z0-9-_\\.]{3,40}$/),\n    isValidPassword: !!form.password.match(/(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{6,32}$/),\n    isValidCheckPass: Boolean(form.checkPassword && form.password === form.checkPassword && \n      form.checkPassword !== form.email && form.checkPassword !== form.name),        \n  }\n};\n","import React, { useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport RegistrationForm from './registration-form';\n\nconst ModalExample = (props) => {\n  const [isSubmitting, setSubmitting] = useState(false); \n  \n  const styledButton = isSubmitting ? `green` :  `#558CB7`;\n\n  const {\n    buttonLabel,\n    className\n  } = props;\n\n  const [modal, setModal] = useState(true);\n\n  const toggle = () => setModal(!modal);\n\n  return (\n    \n    <div>\n      <Button \n        style={{backgroundColor: styledButton, borderColor: `#558CB7`}} \n        color=\"danger\" \n        onClick={toggle} \n        disabled={isSubmitting}\n        >{buttonLabel}\n      </Button>\n      <Modal isOpen={modal} toggle={toggle} className={className}>\n        <ModalHeader style={{border: `none`}} toggle={toggle}>Регистарция</ModalHeader>\n        <ModalBody>\n          <RegistrationForm setSubmitting={setSubmitting} setModal={setModal}/>\n        </ModalBody>       \n      </Modal>\n    </div>\n  );\n}\n\nexport default ModalExample;\n\n","import React from 'react';\nimport Modal from './components/modal';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Modal \n      buttonLabel={`Регистрация`}\n      className={`registration`}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}