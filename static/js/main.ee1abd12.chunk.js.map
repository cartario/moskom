{"version":3,"sources":["validation.js","components/registration-form.jsx","components/modal.jsx","App.js","serviceWorker.js","index.js"],"names":["getTouchedValidEmail","isValidEmail","touched","Rules","style","listStyle","padding","Example","props","setSubmitting","setModal","useState","email","name","password","checkPassword","form","setForm","conditions","setConditions","setTouched","allFieldsFulled","Boolean","length","match","isValidForm","changeHandler","e","target","value","Form","onSubmit","preventDefault","console","log","JSON","stringify","FormGroup","Label","fontWeight","for","Input","borderColor","onFocus","onBlur","onChange","type","id","placeholder","color","pass","check","href","textAlign","Button","disabled","backgroundColor","ModalExample","isSubmitting","styledButton","buttonLabel","className","modal","toggle","onClick","Modal","isOpen","ModalHeader","border","ModalBody","App","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ee1abd12.chunk.js","sourcesContent":["export const getTouchedValidEmail = (isValidEmail, touched) => {    \n  switch(true) {\n    case isValidEmail && touched:\n      return `green`;\n    case !isValidEmail && touched:\n      return `red`;\n    default:\n      return ``;\n  }          \n};\n","import React, {useState} from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport {getTouchedValidEmail} from '../validation';\n\nconst Rules = () => {\n  return (\n    <>\n      <p>Пароль должен содержать</p>\n      <ul style={{listStyle: `none` , padding: 0}}>\n        <li>От 6 до 32 символов</li>\n        <li>Цифру</li>\n        <li>Заглавную и строчную букву</li>\n      </ul>\n    </>\n  );\n};\n\nconst Example = (props) => {\n  const {setSubmitting, setModal} = props;\n  \n  const [form, setForm] = useState({\n    email: ``,\n    name: ``,\n    password: ``,\n    checkPassword: ``,    \n  });\n  const [conditions, setConditions] = useState(false);\n  const [touched, setTouched] = useState(false);\n\n  const allFieldsFulled = Boolean(form.email.length) && form.name.length && form.password.length && form.checkPassword.length;\n  const isValidEmail = !!form.email.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\n  \n  const isValidForm = allFieldsFulled && isValidEmail  && conditions;\n\n  const changeHandler = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;    \n    setForm({\n      ...form, [name]:value\n    });    \n  };\n\n  const blurHandler = (e) => {     \n    setTouched(true);   \n  }\n\n  const changeHandlerConditions = () => {     \n    setConditions(!conditions);    \n  }\n\n  return (\n    <Form onSubmit={(e)=>{\n      e.preventDefault();\n      setSubmitting(true);\n      setModal(false);\n      console.log(JSON.stringify(form));\n    }}>\n      \n      <FormGroup>\n        <Label style={{fontWeight: `bold`}} for=\"email\">Email</Label>\n        <Input style={{borderColor: getTouchedValidEmail(isValidEmail, touched)}} \n        value={form.email} \n        onFocus={()=>{}} \n        onBlur={blurHandler} \n        onChange={changeHandler}        \n        type=\"email\" name=\"email\" \n        id=\"email\" \n        placeholder=\"Введите e-mail\" />\n        {touched && !isValidEmail && <p style={{color:`red`}}>Не забудьте ввести действительный email</p>}\n      </FormGroup>\n      <FormGroup>\n        <Label style={{fontWeight: `bold`}} for=\"name\">Никнейм</Label>\n        <Input value={form.name} onChange={changeHandler} type=\"text\" name=\"name\" id=\"name\" />        \n      </FormGroup>\n      <FormGroup>\n        <Label style={{fontWeight: `bold`}} for=\"password\">Пароль</Label>\n        <Input value={form.pass} onChange={changeHandler} type=\"password\" name=\"password\" id=\"password\" placeholder=\"Введите пароль\" />\n      </FormGroup>\n      <Rules />\n      <FormGroup>\n        <Label style={{fontWeight: `bold`}} for=\"checkPassword\">Пароль еще раз</Label>\n        <Input value={form.checkPassword} onChange={changeHandler} type=\"checkPassword\" name=\"checkPassword\" id=\"checkPassword\" placeholder=\"Введите еще раз пароль\" />\n      </FormGroup>\n      <FormGroup check>\n        <Label check>\n          <Input value={conditions} onChange={changeHandlerConditions} type=\"checkbox\" name=\"conditions\"/>{' '}\n          Я принимаю условия <a href=\"#\">пользовательского соглашения</a>\n        </Label>\n      </FormGroup>\n      <div style={{textAlign: `center`, }}><Button disabled={!isValidForm} style={{backgroundColor: `#558CB7`}}>Зарегистрироваться</Button></div>\n    </Form>\n  );\n}\n\nexport default Example;\n","import React, { useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport RegistrationForm from './registration-form';\n\nconst ModalExample = (props) => {\n  const [isSubmitting, setSubmitting] = useState(false); \n  \n  const styledButton = isSubmitting ? `green` :  `#558CB7`;\n\n  const {\n    buttonLabel,\n    className\n  } = props;\n\n  const [modal, setModal] = useState(true);\n\n  const toggle = () => setModal(!modal);\n\n  return (\n    \n    <div>\n      <Button \n        style={{backgroundColor: styledButton, borderColor: `#558CB7`}} \n        color=\"danger\" \n        onClick={toggle} \n        disabled={isSubmitting}\n        >{buttonLabel}\n      </Button>\n      <Modal isOpen={modal} toggle={toggle} className={className}>\n        <ModalHeader style={{border: `none`}} toggle={toggle}>Регистарция</ModalHeader>\n        <ModalBody>\n          <RegistrationForm setSubmitting={setSubmitting} setModal={setModal}/>\n        </ModalBody>       \n      </Modal>\n    </div>\n  );\n}\n\nexport default ModalExample;\n\n","import React from 'react';\nimport Modal from './components/modal';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Modal \n      buttonLabel={`Регистрация`}\n      className={`registration`}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}