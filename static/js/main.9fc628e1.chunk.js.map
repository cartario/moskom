{"version":3,"sources":["components/registration-form.jsx","components/modal.jsx","App.js","serviceWorker.js","index.js"],"names":["Rules","style","listStyle","padding","Example","props","setSubmitting","setModal","useState","email","name","password","checkPassword","form","setForm","conditions","setConditions","touched","setTouched","allFieldsFulled","Object","values","every","value","Boolean","isValidEmail","match","isValidName","isValidPassword","isValidCheckPass","isValidForm","changeHandler","e","target","blurHandler","Form","onSubmit","preventDefault","console","log","JSON","stringify","FormGroup","Label","fontWeight","for","Input","valid","invalid","onBlur","onChange","type","id","placeholder","color","fontSize","pass","check","href","textAlign","Button","disabled","backgroundColor","ModalExample","isSubmitting","styledButton","buttonLabel","className","modal","toggle","borderColor","onClick","Modal","isOpen","ModalHeader","border","ModalBody","App","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+TAIMA,EAAQ,WACZ,OACE,oCACE,+JACA,wBAAIC,MAAO,CAACC,UAAU,OAAUC,QAAS,IACvC,+GACA,8DACA,gLAsIOC,EAhIC,SAACC,GAAW,IACnBC,EAA2BD,EAA3BC,cAAeC,EAAYF,EAAZE,SADG,EAGDC,mBAAS,CAC/BC,MAAM,GACNC,KAAK,GACLC,SAAS,GACTC,cAAc,KAPS,mBAGlBC,EAHkB,KAGZC,EAHY,OASWN,oBAAS,GATpB,mBASlBO,EATkB,KASNC,EATM,OAUKR,mBAAS,CACrCC,OAAO,EACPC,MAAM,EACNC,UAAU,EACVC,eAAe,IAdQ,mBAUlBK,EAVkB,KAUTC,EAVS,KAiBnBC,EAAkBC,OAAOC,OAAOR,GAAMS,OAAM,SAACC,GAAD,OAASC,QAAQD,MAC7DE,IAAiBZ,EAAKJ,MAAMiB,MAAM,wCAClCC,IAAgBd,EAAKH,KAAKgB,MAAM,mCAChCE,IAAoBf,EAAKF,SAASe,MAAM,uDACxCG,EAAmBL,QACvBX,EAAKD,eACLC,EAAKF,WAAaE,EAAKD,eACvBC,EAAKD,gBAAkBC,EAAKJ,OAC5BI,EAAKD,gBAAkBC,EAAKH,MAExBoB,EAAcX,GAAmBM,GAAgBE,GAAeC,GAAmBC,GAAoBd,EAEvGgB,EAAgB,SAACC,GACrB,IAAMtB,EAAOsB,EAAEC,OAAOvB,KAChBa,EAAQS,EAAEC,OAAOV,MACvBT,EAAQ,2BACHD,GADE,kBACKH,EAAMa,MAIdW,EAAc,SAACF,GACnB,IAAMtB,EAAOsB,EAAEC,OAAOvB,KACtBQ,EAAW,2BACND,GADK,kBACKP,GAAM,MAQvB,OACE,kBAACyB,EAAA,EAAD,CAAMC,SAAU,SAACJ,GACfA,EAAEK,iBACF/B,GAAc,GACdC,GAAS,GACT+B,QAAQC,IAAIC,KAAKC,UAAU5B,MAG3B,kBAAC6B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAO1C,MAAO,CAAC2C,WAAW,QAAUC,IAAI,SAAxC,SACA,kBAACC,EAAA,EAAD,CACEC,MAAStB,GAAcR,EAAQR,MAC/BuC,SAAYvB,GAAcR,EAAQR,MAClCc,MAAOV,EAAKJ,MACZwC,OAAQf,EACRgB,SAAUnB,EACVoB,KAAK,QACLzC,KAAK,QACL0C,GAAG,QACHC,YAAY,sDACbpC,EAAQR,QAAUgB,GAAgB,uBAAGxB,MAAO,CAACqD,MAAM,QAAjB,kMAErC,kBAACZ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAO1C,MAAO,CAAC2C,WAAW,QAAUC,IAAI,QAAxC,8CACA,kBAACC,EAAA,EAAD,CACEC,MAASpB,GAAaV,EAAQP,KAC9BsC,SAAYrB,GAAaV,EAAQP,KACjCa,MAAOV,EAAKH,KACZuC,OAAQf,EACRgB,SAAUnB,EACVoB,KAAK,OACLzC,KAAK,OACL0C,GAAG,SACJnC,EAAQP,OAASiB,GAAe,yBAAK1B,MAAO,CAACsD,SAAS,SAAtB,0PAGjC,4BACE,wBAAItD,MAAO,CAACqD,MAAM,QAAlB,2IACA,wBAAIrD,MAAO,CAACqD,MAAM,QAAlB,kRACA,wBAAIrD,MAAO,CAACqD,MAAM,SAAlB,sPAKJ,kBAACZ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAO1C,MAAO,CAAC2C,WAAW,QAAUC,IAAI,YAAxC,wCACA,kBAACC,EAAA,EAAD,CACAC,MAASnB,GAAiBX,EAAQN,SAClCqC,SAAYpB,GAAiBX,EAAQN,SACrCY,MAAOV,EAAK2C,KACZP,OAAQf,EACRgB,SAAUnB,EAAeoB,KAAK,WAAWzC,KAAK,WAAW0C,GAAG,WAAWC,YAAY,oFAClFpC,EAAQN,WAAaiB,GAAmB,uBAAG3B,MAAO,CAACqD,MAAM,QAAjB,gIAE3C,kBAAC,EAAD,MACA,kBAACZ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAO1C,MAAO,CAAC2C,WAAW,QAAUC,IAAI,iBAAxC,8EACA,kBAACC,EAAA,EAAD,CACAC,MAASlB,GAAkBZ,EAAQL,cACnCoC,SAAYnB,GAAkBZ,EAAQL,cACtCW,MAAOV,EAAKD,cACZqC,OAAQf,EACRgB,SAAUnB,EAAeoB,KAAK,WAAWzC,KAAK,gBAAgB0C,GAAG,gBAAgBC,YAAY,0HAC5FxC,EAAKJ,OAASI,EAAKD,gBAAkBC,EAAKJ,OAAS,uBAAGR,MAAO,CAACqD,MAAM,QAAjB,6LACnDzC,EAAKH,MAAQG,EAAKD,gBAAkBC,EAAKH,MAAQ,uBAAGT,MAAO,CAACqD,MAAM,QAAjB,+MACjDrC,EAAQL,eAAiBC,EAAKD,gBAAiBC,EAAKF,SAAW,uBAAGV,MAAO,CAACqD,MAAM,QAAjB,6GAChEzC,EAAKD,eAAiBiB,GAAoB,0BAAM5B,MAAO,CAACsD,SAAS,SAAvB,iGAG5C,kBAACb,EAAA,EAAD,CAAWe,OAAK,GACd,kBAACd,EAAA,EAAD,CAAOc,OAAK,GACV,kBAACX,EAAA,EAAD,CAAOvB,MAAOR,EAAYmC,SA3EF,WAC9BlC,GAAeD,IA0EoDoC,KAAK,WAAWzC,KAAK,eAAe,IADnG,sGAEqB,uBAAGgD,KAAK,KAAR,yKAGvB,yBAAKzD,MAAO,CAAC0D,UAAU,WAAc,kBAACC,EAAA,EAAD,CAAQC,UAAW/B,EAAa7B,MAAO,CAAC6D,gBAAgB,YAAxD,mHCtG5BC,EAlCM,SAAC1D,GAAW,IAAD,EACQG,oBAAS,GADjB,mBACvBwD,EADuB,KACT1D,EADS,KAGxB2D,EAAeD,EAAY,kBAG/BE,EAEE7D,EAFF6D,YACAC,EACE9D,EADF8D,UAP4B,EAUJ3D,oBAAS,GAVL,mBAUvB4D,EAVuB,KAUhB7D,EAVgB,KAYxB8D,EAAS,kBAAM9D,GAAU6D,IAE/B,OAEE,6BACE,kBAACR,EAAA,EAAD,CACE3D,MAAO,CAAC6D,gBAAiBG,EAAcK,YAAY,WACnDhB,MAAM,SACNiB,QAASF,EACTR,SAAUG,GACRE,GAEJ,kBAACM,EAAA,EAAD,CAAOC,OAAQL,EAAOC,OAAQA,EAAQF,UAAWA,GAC/C,kBAACO,EAAA,EAAD,CAAazE,MAAO,CAAC0E,OAAO,QAAUN,OAAQA,GAA9C,sEACA,kBAACO,EAAA,EAAD,KACE,kBAAC,EAAD,CAAkBtE,cAAeA,EAAeC,SAAUA,Q,MCfrDsE,MAXf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,CACAD,YAAW,qEACXC,UAAS,mBCEK3C,QACW,cAA7BsD,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStD,MACvB,2DCXNuD,IAASC,OACP,oCACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.9fc628e1.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\r\nimport {getTouchedValidInput, getValidPassword} from '../validation';\r\n\r\nconst Rules = () => {\r\n  return (\r\n    <>\r\n      <p>Пароль должен содержать</p>\r\n      <ul style={{listStyle: `none` , padding: 0}}>\r\n        <li>От 6 до 32 символов</li>\r\n        <li>Цифру</li>\r\n        <li>Заглавную и строчную букву</li>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Example = (props) => {\r\n  const {setSubmitting, setModal} = props;\r\n  \r\n  const [form, setForm] = useState({\r\n    email: ``,\r\n    name: ``,\r\n    password: ``,\r\n    checkPassword: ``,    \r\n  });\r\n  const [conditions, setConditions] = useState(false);\r\n  const [touched, setTouched] = useState({\r\n    email: false,\r\n    name: false,\r\n    password: false,\r\n    checkPassword: false,\r\n  });\r\n\r\n  const allFieldsFulled = Object.values(form).every((value)=>Boolean(value));\r\n  const isValidEmail = !!form.email.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\r\n  const isValidName = !!form.name.match(/^[a-zA-Z][a-zA-Z0-9-_\\.]{3,40}$/);\r\n  const isValidPassword = !!form.password.match(/(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{6,32}$/);\r\n  const isValidCheckPass = Boolean(\r\n    form.checkPassword && \r\n    form.password === form.checkPassword && \r\n    form.checkPassword !== form.email &&\r\n    form.checkPassword !== form.name);\r\n\r\n  const isValidForm = allFieldsFulled && isValidEmail && isValidName && isValidPassword && isValidCheckPass && conditions;\r\n\r\n  const changeHandler = (e) => {\r\n    const name = e.target.name;\r\n    const value = e.target.value;    \r\n    setForm({\r\n      ...form, [name]:value\r\n    });    \r\n  };\r\n\r\n  const blurHandler = (e) => {    \r\n    const name = e.target.name;    \r\n    setTouched({\r\n      ...touched, [name]:true\r\n    });   \r\n  };\r\n\r\n  const changeHandlerConditions = () => {     \r\n    setConditions(!conditions);    \r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={(e)=>{\r\n      e.preventDefault();\r\n      setSubmitting(true);\r\n      setModal(false);\r\n      console.log(JSON.stringify(form));\r\n    }}>\r\n      \r\n      <FormGroup>\r\n        <Label style={{fontWeight: `bold`}} for=\"email\">Email</Label>\r\n        <Input           \r\n          valid = {isValidEmail&&touched.email} \r\n          invalid = {!isValidEmail&&touched.email} \r\n          value={form.email}        \r\n          onBlur={blurHandler} \r\n          onChange={changeHandler}        \r\n          type=\"email\" \r\n          name=\"email\" \r\n          id=\"email\" \r\n          placeholder=\"Введите e-mail\" />\r\n        {touched.email && !isValidEmail && <p style={{color:`red`}}>Не забудьте ввести действительный email</p>}\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label style={{fontWeight: `bold`}} for=\"name\">Никнейм</Label>\r\n        <Input \r\n          valid = {isValidName&&touched.name} \r\n          invalid = {!isValidName&&touched.name} \r\n          value={form.name} \r\n          onBlur={blurHandler} \r\n          onChange={changeHandler} \r\n          type=\"text\" \r\n          name=\"name\" \r\n          id=\"name\" />\r\n        {touched.name && !isValidName && <div style={{fontSize: `12px`}}> \r\n        Не забудьте ввести корректный никнейм. Никнейм:\r\n\r\n        <ul>\r\n          <li style={{color: `red`}}>должен начинаться с буквы</li>\r\n          <li style={{color: `red`}}>должен состоять из латинских символов без пробелов</li>\r\n          <li style={{color: `grey`}}>может содержать цифры и нижнее подчеркивание</li>\r\n        </ul>\r\n         </div>}\r\n        \r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label style={{fontWeight: `bold`}} for=\"password\">Пароль</Label>\r\n        <Input \r\n        valid = {isValidPassword&&touched.password} \r\n        invalid = {!isValidPassword&&touched.password} \r\n        value={form.pass} \r\n        onBlur={blurHandler}\r\n        onChange={changeHandler} type=\"password\" name=\"password\" id=\"password\" placeholder=\"Введите пароль\" />\r\n        {touched.password && !isValidPassword && <p style={{color:`red`}}> Слишком простой пароль</p>}       \r\n      </FormGroup>\r\n      <Rules />\r\n      <FormGroup>\r\n        <Label style={{fontWeight: `bold`}} for=\"checkPassword\">Пароль еще раз</Label>\r\n        <Input\r\n        valid = {isValidCheckPass&&touched.checkPassword} \r\n        invalid = {!isValidCheckPass&&touched.checkPassword} \r\n        value={form.checkPassword} \r\n        onBlur={blurHandler}\r\n        onChange={changeHandler} type=\"password\" name=\"checkPassword\" id=\"checkPassword\" placeholder=\"Введите еще раз пароль\" />\r\n        {form.email && form.checkPassword === form.email && <p style={{color:`red`}}>Пароль не должен совпадать с почтой</p>}\r\n        {form.name && form.checkPassword === form.name && <p style={{color:`red`}}>Пароль не должен совпадать с никнеймом</p>}\r\n        {touched.checkPassword && form.checkPassword !==form.password ? <p style={{color:`red`}}> Пароли не совпадают</p> :\r\n        form.checkPassword && isValidCheckPass && <span style={{fontSize:`12px`}}> Пароли совпадают</span>\r\n        }\r\n      </FormGroup>\r\n      <FormGroup check>\r\n        <Label check>\r\n          <Input value={conditions} onChange={changeHandlerConditions} type=\"checkbox\" name=\"conditions\"/>{' '}\r\n          Я принимаю условия <a href=\"#\">пользовательского соглашения</a>\r\n        </Label>\r\n      </FormGroup>\r\n      <div style={{textAlign: `center`, }}><Button disabled={!isValidForm} style={{backgroundColor: `#558CB7`}}>Зарегистрироваться</Button></div>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default Example;\r\n","import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap';\r\nimport RegistrationForm from './registration-form';\r\n\r\nconst ModalExample = (props) => {\r\n  const [isSubmitting, setSubmitting] = useState(false); \r\n  \r\n  const styledButton = isSubmitting ? `green` :  `#558CB7`;\r\n\r\n  const {\r\n    buttonLabel,\r\n    className\r\n  } = props;\r\n\r\n  const [modal, setModal] = useState(true);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  return (\r\n    \r\n    <div>\r\n      <Button \r\n        style={{backgroundColor: styledButton, borderColor: `#558CB7`}} \r\n        color=\"danger\" \r\n        onClick={toggle} \r\n        disabled={isSubmitting}\r\n        >{buttonLabel}\r\n      </Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader style={{border: `none`}} toggle={toggle}>Регистарция</ModalHeader>\r\n        <ModalBody>\r\n          <RegistrationForm setSubmitting={setSubmitting} setModal={setModal}/>\r\n        </ModalBody>       \r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ModalExample;\r\n\r\n","import React from 'react';\r\nimport Modal from './components/modal';\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Modal \r\n      buttonLabel={`Регистрация`}\r\n      className={`registration`}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}